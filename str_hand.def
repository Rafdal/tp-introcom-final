*********************************************************
*		STRING HANDLERS (str_hand.def)		*
*********************************************************
*	Este archivo de definiciones contiene macros	*
*	para manejar las subrutinas de los modulos:	*
*	- string.msa					*
*	- UI.msa					*
*********************************************************


*	TO-DO: Optimizar
*************************************************************************
*		# TESTED WORKING STABLE #	Sun 06  04:04		*
*************************************************************************
*			INT4STR (HANDLER) 	v2			*
* Descripcion:								*
*	Convierte un num de 2 bytes en una cadena de texto de 3 bytes	*
*	- Si la conversion fue exitosa, salta al rotulo de 'pass'	*
*	- si no lo fue, se ejecuta la instruccion siguiente		*
*									*
* Params:								*
*	- num:	direc. memoria, variable 'num' a convertir (num:2 bytes)*		
*	- strOut: rotulo/direc. mem. para guardar la cadena de 3 chars	*
*	- pass: rotulo para hacer branch si la conv fue exitosa		*
*									*
* 	SINTAXIS:	%int4str num,strOut,pass			*
*************************************************************************
	macro	%int4str
	pshx			backup de X e Y 	[TO-DO]: era necesario hacer estos backups???
	pshy

	ldx	\0		cargo 'num' el numero a convertir
	pshx			paso 'num' por stack
	ldy	#\1+1		cargo la direccion de la string de salida
	jsr	int4str		ejecuto la subrutina en su version mas reciente (int4str)
	pulx			libero 2 bytes del stack

	puly			devuelvo backup de X e Y
	pulx
	bcc	\2		Si el carry estaba en 0, salto al rotulo de operacion exitosa
	endmac			fin macro %int2str (str handler)




*************************************************************************
*		# TESTED WORKING STABLE #	Sat 05  22:13		*
*************************************************************************
*			PRINTLN (HANDLER)				*
* Descripcion:								*
*	Recibe el rotulo/puntero (direccion de 2 bytes)	a una variable	*
*	global de 4 bytes, que contiene los caracteres a mostrar por el	*
*	display.							*
* Sintaxis:								*
*	%println strOut							*
*************************************************************************
	macro	%println
	ldy	#\0
	jsr	println
	endmac