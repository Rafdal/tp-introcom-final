*************************************************************************
*	USER INTERFACE MODULES	v2		UI.msa			*
*									*
* subrutinas para controlar el display, teclado y carga de datos	*
*************************************************************************

        p68h11

	public	initdis,waitkey,outchar,println,clrdis,bitmap,displ,print,asksure

	extern	delay,txtconf

******* Ports ***************************

DDRC	equ	$1007		; data direction register for C
PIOC	equ	$1002		; for strobe B assertion change
PORTCL	equ	$1005		; port C latched
PORTB	equ	$1004		; port B
PORTC	equ	$1003		; rows


******* Cols and Row Ports **************

ROWS	equ	PORTC		; outputs
COLS	equ	PORTCL		; inputs

***** Row and column Masks *************************

FIL0	equ	00001110b  	; mascaras para manejo de filas
FIL1	equ	00001101b
FIL2	equ	00001011b
FIL3	equ	00000111b

COL0	equ	11100000b	; mascaras para manejo de columnas
COL1	equ	11010000b
COL2	equ	10110000b
COL3	equ	01110000b	

****** Keyboard Mask ********************
MASKOUT	equ	11110000b



$str_hand.def			string handlers
$macros.def

*-###################################################################
*-	T O   D O	A R R E G L A R   C O N S T A N T E S
*-###################################################################
$const.def

******************************************************************************
* 
*	Inicializaci�n del Bitmap
* 
******************************************************************************
	ORG	$5EFF
	fcb	0			; indicamos que usaremos RGB
	ORG	$5F00
bitmap	rmb	COL*FIL*EL_SIZE		; Inicializo la matriz del bitmap



	rseg	CODE




*		si se confirma la accion, salimos con el carry en 1.
*		si no se confirma, salimos sin carry.
asksure	equ	*
	%BACKUP
	ldx	#txtconf	; Imprimimos en el display una frase que pide una confirmación
	jsr	displ
	jsr	waitkey		; Esperamos a que se presione una tecla
	cmpa	#RESET		
	bne	ret		; Si la tecla pulsada no fue RESET salimos sin carry
	sec			; Si se quiere hacer reset, seteamos el carry en 1 

ret	%RESTORE
	rts



**************************************************************************************************************
*
*	displ: imprime en el display una frase desplazándose de derecha a izquierda
*		-Recibe por X la primera posición de memoria de la frase a imprimir
*
**************************************************************************************************************
displ	equ	*

	%BACKUP	
	
	pshx			; Copiamos el contenido de X a Y mediante el stack
	puly
	xgdx			; Restamos 3 al contenido de X para apuntar 3 posiciones antes del primer caracter
	subd	#3		; para que la subrutina print imprima 3 posiciones vacías al comienzo.
	xgdx

sigo	ldaa	#CICLOS		; Hacemos un delay de 1 segundo (2 ciclos de 0,5 segundos)
	jsr	delay
	pshy			; paso al stack la posición a partir de la cual está permitido imprimir
	jsr	print		; imprimo 4 caracteres en el display a partir de la "posición actual de la frase"
	tsy			; Creo un frame pointer para poder comparar X con la primera posición de la frase
*	...			; y así no imprimir las posiciones anteriores a la frase
	inx			; Incremento X para apuntar al siguiente caracter
	cpx	0,y		; Analizo si la posicion apuntada pertenece a la frase
	puly			; Recupero Y del stack para "balancearlo" y no generar conflictos
	bmi	sigo		; Si la posicion apuntada no pertenece a la frase, no imprimo ningun caracter
	ldaa	0,x		; Si pertenece, comparamos el contenido con le terminador, si coincide, 
	cmpa	#TERM		; no imprimimos ningún caracter en el display y salimos,
	beq	listo
	bra	sigo		; Si no es el terminador, analizo el siguiente

listo	%RESTORE
	rts

*****************************************************************************************************************
*
*	print: Imprime en el display 4 carácteres de una frase en el orden que aparecen en memoria.
*		Deja espacios en blanco si los primeros carácteres apuntado están fuera de la frase,
*		y deja espacios vacíos luego de encontrar el terminador de la frase.
*
*		-Recibe por Stack la posición del primer carácter de la frase original, a partir de la cuál está
*			permitido imprimir caráteres
*		-Recibe por X la posición del primer carácter apuntado (puede estar antes de la frase original)
*
******************************************************************************************************************
print	equ	*

	%BACKUP
	
	tsy			; creo un frame pointer
	
	jsr	clrdis		; vacío el display
	ldab	#INIDIS		; Cargo en B la posición de más a la izquierda del display

imprim	cpx	8,Y		; Comparo X con la posición del primer caracter de la frase
	bmi	incremx		; si es menor, quiere decir que hay que dejar el espacio en blanco: salteo
	
	ldaa	0,x		; Cargo en AccA el caracter que quiero imprimir
	cmpa	#0
	beq	finprnt		; Si el caracter cargado es el terminador, voy al final de la subrutina
	jsr	outchar		; Si no es el terminador, imprimo el caracter

incremx	inx			; Apunto X al siguiente caracter
	decb			; Apunto hacia la siguiente posición del display.
	bmi	finprnt		; Si ya no existen posiciones, salgo
	bra	imprim		; repito con el siguente caracter

finprnt	%RESTORE
	
	rts








*************************************************************************
*		# TESTED WORKING STABLE #	Sun 06  18:15		*
*******************************************************************************************************
* 				WAITKEY
* Descripcion: 
*	Espera a que se presione una tecla y devuelve el valor numerico 
*	de la tecla presionada en el teclado por el registro A
* 
* - Pone el carry en 1 si no encontro el numero, y en 0 en caso de haberlo encontrado
* 
*******************************************************************************************************
waitkey	equ	*

	pshb	                ; hago backup del registro B

fi0	ldaa	#FIL0		; cargo la fila 0 con un 0
	staa	PORTC
	ldab	#0		; cargo B con el numero de fila
	jsr	convert
	bcc	finin		; si se encontro el numero, termino

fi1	ldaa	#FIL1		; cargo la fila 1 con un 0
	staa	PORTC
	ldab	#1		; cargo B con el numero de fila
	jsr	convert
	bcc	finin		; si se encontro el numero, termino

fi2	ldaa	#FIL2		; cargo la fila 2 con un 0
	staa	PORTC
	ldab	#2		; cargo B con el numero de fila
	jsr	convert
	bcc	finin		; si se encontro el numero, termino

fi3	ldaa	#FIL3		; cargo la fila 3 con un 0
	staa	PORTC
	ldab	#3		; cargo B con el numero de fila
	jsr	convert
	bcc	finin		; si se encontro el numero, termino

	sec			; si no encontro el numero, pongo el carry en 1.
	bra	endin

finin	tba			; transfiero el valor de B con el numero encontrado en A.

endin	pulb			; recupero el registro B

	bcs	waitkey

	rts

*******************************************************************************************************
* 
*	convert: dados un numero de fila y el valor devuelto por el teclado en dicha fila
*		devuelve el numero apretado en el teclado en valor hexadecimal
*		- Recibe por B el numero de fila donde se lo encontro (0-3)
*		- Devuelve por B el numero apretado en el teclado en valor hexadecimal
*		- Pone el carry en 1 si no encontro el numero, y en 0 en caso de haberlo encontrado
* 
*******************************************************************************************************
convert	equ	*

	psha

	ldaa	#4
	mul			; hago que B valga el menor numero que aparece entre las teclas de la fila
	
	ldaa	PORTC		; leo el puerto C
	anda	#MASKOUT	; hago una mascara para obtener solo los 4 bits mas significativos (columnas)
	
	cmpa	#MASKOUT
	beq	sinnum  	; de ser todos 1, no se apreto ninguna tecla, termino la subrutina

	cmpa	#COL0		
	bne	sig1		; si la tecla apretada no estaba en la columna 0, me fijo si fue en 1
	ldaa	#0		; si fue en 0, cargo en A el valor numerico 0
	bra	multi		; voy a calcular el numero

sig1	cmpa	#COL1		
	bne	sig2		; si la tecla apretada no estaba en la columna 1, me fijo si fue en 2
	ldaa	#1		; si fue un 1, cargo en A el valor numerico 1
	bra	multi		; voy a calcular el numero

sig2	cmpa	#COL2
	bne	sig3		; si la tecla apretada no estaba en la columna 2, debe estar en 3
	ldaa	#2		; si fue un 2, cargo en A el valor numerico 2
	bra	multi		; voy a calcular el numero

sig3	ldaa	#3		; en este punto la tecla apretada debe ser de la columna 3, por lo que cargo un 3 en A
	bra	multi		; voy a calcular el numero


multi	aba			; le sumo al valor de A (la columna), el valor de B, que apuntaba a la primera columna.
	tab			; devuelvo el valor en B

	ldaa	PORTC
	staa	PORTC		; actualizamos el puerto C para poder visualizar la tecla apretada
	
soltar	ldaa	PORTC		
	anda	#MASKOUT	; esperamos a que se suelte la tecla para que el programa siga, y asi poder mandar
	cmpa	#MASKOUT	; un caracter por vez que se presiona la tecla
	bne	soltar

	bra	fincon		; pongo el carry en 0, indicando que encontro el numero

sinnum	sec			; si no hay numero, seteo el carry

fincon	pula

	rts





*************************************************************************
*		# TESTED WORKING STABLE #	Sat 05  18:26		*
*************************************************************************
*		println	(PRINT LINE)					*
* Descripcion:								*
*	Imprime 4 caracteres en el display en una sola			*
* subrutina, utilizando un arreglo de 4 bytes (caracteres) en memoria	*
* como input para el display						*
*									*
* Params:								*
* 	- [AccY]: Pos. de memoria de la cadena que			*
*		desea imprimir						*
* 									*
* Nota: no devuelve valores, deja el AccY como estaba			*
*	antes de ejecutar la subrutina					*
*************************************************************************
* [XH] 0 <- (X)
* [XL] 1
* [PCH] 2
* [PCL] 3

println	equ	*
	pshy		backup Y
	psha		backup A
	pshb		backup B

	ldab	#4	;inicio B en 4
repite	equ	*
	decb
	ldaa	0,y	;leo el caracter en cuestion
	stab	PORTCL	;set the position 0-3
	staa	PORTB	;set the character
	iny

	tstb
	bne	repite

	pulb		recupero backup B
	pula		recupero backup A
	puly		recupero backup Y
	rts



*************************************************************************
*		# TESTED WORKING STABLE #	Mon 07  13:09		*
*************************************************************************
*		CLEAR	DISPLAY				*
* Descripcion:						*
*	Borra el contenido del display 			*
*							*
* Nota: no devuelve valores ni recibe parametros 	*
*********************************************************
clrdis	equ	*
	psha			backup de A
	pshb			backup de B

	ldab	#3		cantidad de ciclos menos 1 (para usarlo como index)
L05	ldaa	#' '		cargo un espacio
	jsr 	outchar		lo escribo en el display
	decb			decremento el indice
	bpl	L05		si es positivo, repito (hasta el cero)

	pulb			
	pula
	rts			retorno de la subrutina



*****************************************
*	outchar				*
* ACCA: Caracter a enviar		*
* ACCB: Posicion	(0-3)		*
*****************************************
outchar	equ	*
	stab	PORTCL	;set the position
	staa	PORTB	;set the character
	rts

*****************************************
*	initdis				*
* Inicia el display			*
*****************************************

initdis	equ	*
	psha
	ldaa	#$0F	;set for output
	staa	DDRC	;C output
	ldaa	PIOC	;get current value
	anda	#$FE	;reset bit 0 to 0
	staa	PIOC	;send it out
	pula
	rts

*************************************************************************************************************
	END
