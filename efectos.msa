	p68h11

	public	espiral,pintar
	public	frase1,frase2,txtconf
	extern	delay,canhun1

$const.def
$macros.def

	rseg	CODE
***************************************************************************************************************************************************
*
*	Espacio de subrutinas destinadas al espiral que muestra al jugador ganador
*
*****************************************************************************************************************************************************
*
*	Movimiento del espiral: El espiral funciona en sentido horario, comenzando su movimiento desde una posicion central del bitmap, 
*		moviendose en un patron repetitivo: arriba, derecha, abajo, izquierda.
*		La magnitud del desplazamiento funciona de a pares: arriba/derecha y abajo/izquierda, que tienen la misma magnitud, incrementando 
*		esta cantidad a medida que pasamos de una pareja a otra.
*
******************************************************************************************************************************************************
espiral	equ	*
	
	%BACKUP			; hago backup de los registros
	
	ldaa	canhun1		; analizo quien fue el ganador
	cmpa	#6			
	bne	gana2

gana1	equ	*		; Cargo la matriz ganadora en 
	ldx	#matg1		; el Registro X
	stx	matgan		; y su espacio de memoria reservado (matgan)
	bra	ini_esp		
gana2	equ	*
	ldx	#matg2
	stx	matgan

ini_esp	equ	*		; inicia el espiral
	clr	contesp		; pongo en 0 el contador de la magnitud del desplazamiento
	clr	contmov		; y el contador parcial de movimientos

	ldaa	#4		; cargo las coordenadas de la posicion central (Fila 4(3),Columna 3(2))
	deca			; desde donde inicia el espiral
	staa	fil_esp		; en las posiciones designadas para coordenadas
	ldab	#3
	decb
	stab	col_esp
	%POSIC			; posiciono X en las coordenadas provistas de la matriz ganadora
	jsr	pintar		; copio el contenido de la coordenada de la matriz gan. en el bitmap

up	equ	*
	inc	contesp		; incremento el contador de movimientos que realizara en esa direccion
	ldaa	contesp		; y lo cargo en 
	staa	contmov		; el contador parcial
sigueup	dec	fil_esp		; decremento la coordenada fila (desplazo hacia arriba en la matriz)
	%POSIC			; posiciono X en las coordenadas provistas de la matriz ganadora
	jsr	pintar		; copio el contenido de la coordenada de la matriz gan. en el bitmap
	dec	contmov		; decremento el contador parcial de movimientos
	bne	sigueup		; si siguen quedando movimientos, repito el proceso

right	equ	*		
	ldaa	contesp		; cargo el contador de movimientos en esa direccion
	staa	contmov		; en el contador parcial
sigueri	inc	col_esp		; incremento la coordenada columna (desplazo hacia la derecha en la matriz)
	%POSIC			; posiciono X en las coordenadas provistas de la matriz ganadora
	jsr	pintar		; copio el contenido de la coordenada de la matriz gan. en el bitmap
	dec	contmov		; decremento el contador parcial de movimientos
	bne	sigueri		; si siguen quedando movimientos, repito el proceso
	
down	equ	*
	inc	contesp		; incremento el contador de movimientos que realizara en esa direccion
	ldaa	contesp		; y lo cargo en 
	staa	contmov		; el contador parcial
siguedo	inc	fil_esp		; incremento la coordenada fila (desplazo hacia abajo en la matriz)
	%POSIC			; posiciono X en las coordenadas provistas de la matriz ganadora
	jsr	pintar		; copio el contenido de la coordenada de la matriz gan. en el bitmap
	bcs	finesp		; si hay carry, significa que terminamos el espiral
	dec	contmov		; decrementamos el contador parcial de movimientos en esa direccion
	bne	siguedo		; si nos quedan movimientos, repetimos el proceso
	
left	equ	*
	ldaa	contesp		; cargo el contador de movimientos en esa direccion
	staa	contmov		; en el contador parcial
siguele	dec	col_esp		; decremento la coordenada columna (desplazo hacia la izquierda en la matriz)
	%POSIC			; posiciono X en las coordenadas provistas de la matriz ganadora
	jsr	pintar
	dec	contmov
	bne	siguele		; si siguen quedando movimientos, repito el proceso
	jmp	up		; caso contrario, voy a up, para repetir el loop
	
finesp	equ	*	
	%RESTORE		; restauro los registros
	rts			; salgo de la subrutina

*****************************************************************************************************************
*
*	Subrutina Pintar: toma el contenido (color) de un byte de la matriz ganadora (apuntado por x)
*	y lo copia en las mismas coordenadas pero del bitmap.
*
******************************************************************************************************************
pintar	equ	*
	%BACKUP				; hago backup de los registros
	ldaa	#CICLOS
	jsr	delay			; hago un delay antes de pintar
	ldy	#BITMAP			; cargo Y con la celda inicial del bitmap
	ldaa	fil_esp			; cargo A con la coordenada de fila
	ldab	#COL*EL_SIZE
	mul				
	aby				; y me posiciono en la celda inicial de esa fila
	ldab	col_esp			
	aby				; le sumo la coordenada columna. Esta posicionado.
	ldaa	0,X			; Copio el contenido de la celda apuntada por X
	staa	0,Y			; en la celda apuntada por Y 
	cpy	#FINMAP			; Si la celda apuntada por Y es la ultima a colorear
	bne	finpint
	sec				; seteo el carry
	bra 	endpint			
finpint	equ	*
	clc				; sino, lo dejo en 0
endpint	%RESTORE			; restauro los registros
	rts				; salgo de la subrutina





	rseg	VARS
*____________________________________________
*
*	Variables para la subrutina espiral
*____________________________________________
contesp	rmb	1		; Contador absoluto de cantidad de mov. para espiral
contmov	rmb	1		; Contador parcial de cantidad de mov. para espiral
col_esp	rmb	1		; Coordenadas para espiral. Columnas
fil_esp	rmb	1		; Coordenadas para espiral. Filas
matgan	rmb	2		; Direccion de inicio de matriz ganadora




*******************************************************
*
*	ZONA DE CONSTANTES
*
*******************************************************
	rseg	CONST
********************************************************************
*
*	TABLEROS GANADORES (imagen)
*
********************************************************************
matg1	equ	*					; matriz para P1 ganador
	fcb	ROJOC,ROJOC,ROJOC,BLANCO,BLANCO,ROSAC
	fcb	ROJOC,BLANCO,ROJOC,BLANCO,ROSAC,ROSAC
	fcb	ROJOC,BLANCO,ROJOC,BLANCO,BLANCO,ROSAC
	fcb	ROJOC,ROJOC,ROJOC,BLANCO,BLANCO,ROSAC
	fcb	ROJOC,BLANCO,BLANCO,BLANCO,BLANCO,ROSAC
	fcb	ROJOC,BLANCO,BLANCO,BLANCO,BLANCO,ROSAC

matg2	equ	*					; matriz para P2 ganador
	fcb	AMAR,AMAR,AMAR,ROSAC,ROSAC,ROSAC
	fcb	AMAR,BLANCO,AMAR,ROSAC,BLANCO,ROSAC
	fcb	AMAR,BLANCO,AMAR,BLANCO,BLANCO,ROSAC
	fcb	AMAR,AMAR,AMAR,BLANCO,ROSAC,BLANCO
	fcb	AMAR,BLANCO,BLANCO,ROSAC,BLANCO,BLANCO
	fcb	AMAR,BLANCO,BLANCO,ROSAC,ROSAC,ROSAC

	

*_______________________________________________
*
* Frase de turnos
*______________________________________________
frase1	fcc	'TURNO PLAYER 1'
termin1	fcb	0

frase2	fcc	'TURNO PLAYER 2'
termin2	fcb	0

* 		; Frase de confirmacion
txtconf	fcc	'PRESIONE NUEVAMENTE PARA CONFIRMAR'
	fcb	0


	END