*************************************************************************
*	UTILITIES			utils.msa			*
*************************************************************************
	p68h11

	public delay,copiado,reveal,clr_tab
	extern bitmap

$macros.def
$const.def
	rseg	CODE


*******************************************************************************************************************
* 	Subrutina Reveal: Muestra la ubicacion de los barcos en el Bitmap
*		- Recibe por X la posicion de incio del tablero a mostrar
*******************************************************************************************************************
reveal	equ	*
	
	%backup
	
	ldy	#bitmap			; Cargo en Y la primer celda de la matriz destino
	ldab	#36			; Defino un contador de la cantidad de valores a copiar

loop_rv	ldaa	0,X			; Copio el contenido de la celda apuntada a la celda destino
	cmpa	#___			; comparo con agua
	bne	case01
	ldaa	#AZUL			; si es agua, cargo el color azul
	staa	0,Y			; y lo muestro
	bra	pass			; itero el loop

case01	cmpa	#SUB			
	bne	case02
	ldaa	#GRISC			; si es submarino, cargo el color gris claro
	staa	0,Y			; y lo muestro
	bra	pass			; itero el loop

case02	cmpa	#CAR			
	bne	case03
	ldaa	#NARANJA		; si es carguero, cargo el color naranja
	staa	0,Y			; y lo muestro
	bra	pass			; itero el loop

case03	cmpa	#ACZ			
	bne	pass
	ldaa	#NEGRO			; si es acorazado, cargo el color negro
	staa	0,Y			; y lo muestro

pass	inx				; Apunto a las siguientes celdas de origen y destino
	iny				
	decb				; Decremento el contador y compruebo si termine
	bne	loop_rv

	%restup

	rts


*******************************************************************************************************************
* 	Subrutina CLEAR TAB: Borra todos los barcos de un tablero
*		- Recibe por X la posicion de incio del tablero a borrar
*******************************************************************************************************************
clr_tab	equ	*
	psha
	pshb
	pshx
	
	ldab	#36			; Defino un contador de la cantidad de valores a copiar
	ldaa	#___			; cargo A con el ID de un bloque de agua
L02	equ	*			; Copio el contenido de la celda apuntada a la celda destino 
	staa	0,X			; correspondiente.
	
	inx				; Apunto a las siguientes celdas de origen y destino
	decb				; Decremento el contador y compruebo si termine
	bne	L02

	pulx
	pulb
	pula
	rts


*******************************************************************************************************************
* 	Subrutina copiado: Copia el contenido de una matriz al Bitmap
*		- Recibe por X la posicion de incio del tablero por copiar
*******************************************************************************************************************
copiado	equ	*
	
	%backup
	
	ldy	#bitmap			; Cargo en Y la primer celda de la matriz destino
	ldab	#36			; Defino un contador de la cantidad de valores a copiar

next01	ldaa	0,X			; Copio el contenido de la celda apuntada a la celda destino 
	staa	0,Y			; correspondiente.
	
	inx				; Apunto a las siguientes celdas de origen y destino
	iny				
	decb				; Decremento el contador y compruebo si termine
	bne	next01

	%restup

	rts



*********************************************************
*		SUBRUTINA delay				*
*							*
* Esta subrutina genera un delay de aprox 0.5 - 1s para	*
* simluador del wookie					*
* No recibe ningun parametro ni retorna valores, no 	*
* hace falta liberar el stack depues de invocarla	*
*********************************************************

delay	equ	*
	pshx			Hago backup de los registros	(4 ciclos)
	pshy							(5 ciclos)
	psha							(3 ciclos)
	pshb							(3 ciclos)
	ldaa	#8		Cargo la cantidad de repeticiones que hare con el loop1. (23 ciclos)
*								[TOTAL:17]

*	[LOOP1]: n recorridos del loop1 lleva n*(9+T) ciclos, siendo T los ciclos en total del loop2. 
loop1	ldy	#$D900		Cargo la cantidad de repeticiones que hare con el loop2. (4 ciclos)

* 	[LOOP2]: Un solo recorrido del loop2 lleva 9 ciclos, 55552 ($D900) recorridos del loop2 lleva 499968 ciclos
loop2	nop			retardo 		(2 ciclos)
	dey			decremento Y 		(4 ciclos)
	bne	loop2		salto si no es cero 	(3 ciclos)
*							[TOTAL:9]

	deca			decremento A	(2 ciclos)
	bne	loop1		si A!=0, repito (3 ciclos)


	ldy	#$12		Retardo 			(5 ciclos)
	pulb			Recupero el valor 		(4 ciclos)
	pula			de los	registros		(4 ciclos)
	puly							(6 ciclos)
	pulx							(5 ciclos)
	rts			Retorno de la rubrutina		(5 ciclos)
*								[TOTAL:29]




	END